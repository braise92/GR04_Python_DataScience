# -*- coding: utf-8 -*-
"""Python TP1.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1tp9UpuK5NRiFJWCYjy4aHGgLvGRhcjbC

# 1. Scrapping Ratios financiers
"""

import yfinance as yf
import pandas as pd

companies = {
"Apple": "AAPL",
"Microsoft": "MSFT",
"Amazon": "AMZN",
"Alphabet": "GOOGL",
"Meta": "META",
"Tesla": "TSLA",
"NVIDIA": "NVDA",
"Samsung": "005930.KS",
"Tencent": "TCEHY",
"Alibaba": "BABA",
"IBM": "IBM",
"Intel": "INTC",
"Oracle": "ORCL",
"Sony": "SONY",
"Adobe": "ADBE",
"Netflix": "NFLX",
"AMD": "AMD",
"Qualcomm": "QCOM",
"Cisco": "CSCO",
"JP Morgan": "JPM",
"Goldman Sachs": "GS",
"Visa": "V",
"Johnson & Johnson": "JNJ",
"Pfizer": "PFE",
"ExxonMobil": "XOM",
"ASML": "ASML.AS",
"SAP": "SAP.DE",
"Siemens": "SIE.DE",
"Louis Vuitton (LVMH)": "MC.PA",
"TotalEnergies": "TTE.PA",
"Shell": "SHEL.L",
"Baidu": "BIDU",
"JD.com": "JD",
"BYD": "BYDDY",
"ICBC": "1398.HK",
"Toyota": "TM",
"SoftBank": "9984.T",
"Nintendo": "NTDOY",
"Hyundai": "HYMTF",
"Reliance Industries": "RELIANCE.NS",
"Tata Consultancy Services": "TCS.NS"
}
ratios = {
"forwardPE": [],
"beta": [],
"priceToBook": [],
"priceToSales": [],
"dividendYield": [],
"trailingEps": [],
"debtToEquity": [],
"currentRatio": [],
"quickRatio": [],
"returnOnEquity": [],
"returnOnAssets": [],
"operatingMargins": [],
"profitMargins": []
}

# Boucle pour recuperer les donnees des entreprises
for company_name, symbol in companies.items():
    ticker = yf.Ticker(symbol)
    info = ticker.info

    # Pour chaque ratio clé de notre dict 'ratios', on récupère la valeur
    for ratio_key in ratios.keys():
        value = info.get(ratio_key, None)
        ratios[ratio_key].append(value)

# Convertir le dictionnaire en dataframe
df_ratios = pd.DataFrame(ratios)

# Recuperer les compagnies comme index de dataframe
df_ratios.index = list(companies.keys())

df_ratios.to_csv('ratios_financiers.csv', index=True)

"""# 2. Scrapping Variations des stocks"""

from datetime import datetime, timedelta
import os

# Période (5 ans)
start_date = (datetime.today() - timedelta(days=5*365)).strftime('%Y-%m-%d')
end_date = datetime.today().strftime('%Y-%m-%d')

# Dossier de sauvegarde
os.makedirs("Companies_Historical_Data", exist_ok=True)

# Récupération et export des données
for company, symbol in companies.items():
    df = yf.download(symbol, start=start_date, end=end_date)
    df.columns = df.columns.get_level_values(0)
    df = df[['Close']]
    df['Next Day Close'] = df['Close'].shift(-1)
    df['Rendement'] = (df['Next Day Close'] - df['Close']) / df['Close']
    df.dropna(inplace=True)
    df.to_csv(f"Companies_Historical_Data/{company}.csv")